import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, roc_auc_score
from sklearn.preprocessing import LabelEncoder, StandardScaler
import warnings
warnings.filterwarnings('ignore')

def analysis_and_model_page():
    st.title("üîß –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
    st.markdown("---")

    # Sidebar –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")

    # –í–∞—Ä–∏–∞–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data_source = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
        ["–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UCI Repository"]
    )

    data = None

    if data_source == "–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª":
        uploaded_file = st.file_uploader("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç (CSV)", type="csv")
        if uploaded_file is not None:
            data = pd.read_csv(uploaded_file)
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

    else:  # UCI Repository
        if st.button("üåê –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ UCI Repository"):
            try:
                from ucimlrepo import fetch_ucirepo

                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ UCI Repository..."):
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ AI4I 2020 Predictive Maintenance Dataset
                    dataset = fetch_ucirepo(id=601)
                    data = pd.concat([dataset.data.features, dataset.data.targets], axis=1)

                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ UCI Repository!")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                st.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install ucimlrepo")

    if data is not None:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∞–Ω–Ω—ã—Ö
        st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", data.shape[0])
        with col2:
            st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", data.shape[1])
        with col3:
            st.metric("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", data.isnull().sum().sum())

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        st.subheader("üîç –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(data.head())

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
        st.subheader("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–∞—Ö")
        buffer_info = []
        for col in data.columns:
            buffer_info.append({
                "–°—Ç–æ–ª–±–µ—Ü": col,
                "–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö": str(data[col].dtype),
                "–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π": data[col].nunique(),
                "–ü—Ä–æ–ø—É—Å–∫–∏": data[col].isnull().sum()
            })
        st.dataframe(pd.DataFrame(buffer_info))

        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        st.header("üîÑ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processed_data = data.copy()

        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        columns_to_drop = ['UDI', 'Product ID']
        if 'Machine failure' in processed_data.columns:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–∫–∞–∑–æ–≤, —É–¥–∞–ª—è–µ–º –∏—Ö –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π Machine failure
            failure_columns = ['TWF', 'HDF', 'PWF', 'OSF', 'RNF']
            columns_to_drop.extend([col for col in failure_columns if col in processed_data.columns])
            target_column = 'Machine failure'
        else:
            target_column = 'Target'  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

        # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        columns_to_drop = [col for col in columns_to_drop if col in processed_data.columns]
        if columns_to_drop:
            processed_data = processed_data.drop(columns=columns_to_drop)
            st.write(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: {columns_to_drop}")

        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π Type
        if 'Type' in processed_data.columns:
            le = LabelEncoder()
            processed_data['Type'] = le.fit_transform(processed_data['Type'])
            st.write("üî§ –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'Type' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —á–∏—Å–ª–æ–≤—É—é")

        # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        if target_column in processed_data.columns and target_column != 'Target':
            processed_data = processed_data.rename(columns={target_column: 'Target'})

        st.write("‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if 'Target' in processed_data.columns:
            st.subheader("üéØ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")

            col1, col2 = st.columns(2)

            with col1:
                target_counts = processed_data['Target'].value_counts()
                st.write("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
                st.write(target_counts)

                # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                fig, ax = plt.subplots(figsize=(8, 6))
                target_counts.plot(kind='bar', ax=ax, color=['lightblue', 'lightcoral'])
                ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤')
                ax.set_xlabel('–ö–ª–∞—Å—Å (0 - –Ω–æ—Ä–º–∞, 1 - –æ—Ç–∫–∞–∑)')
                ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                plt.xticks(rotation=0)
                st.pyplot(fig)

            with col2:
                # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
                target_percentage = processed_data['Target'].value_counts(normalize=True) * 100
                st.write("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ:")
                for idx, val in target_percentage.items():
                    st.write(f"–ö–ª–∞—Å—Å {idx}: {val:.2f}%")

        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        st.subheader("üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")

        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        numeric_columns = processed_data.select_dtypes(include=[np.number]).columns
        correlation_matrix = processed_data[numeric_columns].corr()

        fig, ax = plt.subplots(figsize=(12, 10))
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, ax=ax)
        ax.set_title('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')
        st.pyplot(fig)

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if 'Target' in processed_data.columns:
            st.header("ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            X = processed_data.drop(columns=['Target'])
            y = processed_data['Target']

            # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)
            X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)

            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
            test_size = st.sidebar.slider("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏ (%)", 10, 40, 20)
            X_train, X_test, y_train, y_test = train_test_split(
                X_scaled_df, y, test_size=test_size/100, random_state=42
            )

            st.write(f"üìà –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {len(X_train)} –∑–∞–ø–∏—Å–µ–π")
            st.write(f"üìâ –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {len(X_test)} –∑–∞–ø–∏—Å–µ–π")

            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            st.subheader("üéØ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–µ–π")

            model_options = {
                "Logistic Regression": LogisticRegression(random_state=42),
                "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
                "XGBoost": XGBClassifier(n_estimators=100, learning_rate=0.1, random_state=42),
                "Support Vector Machine": SVC(kernel='linear', probability=True, random_state=42)
            }

            selected_models = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:",
                list(model_options.keys()),
                default=list(model_options.keys())
            )

            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"):
                if selected_models:
                    results = {}

                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                    progress_bar = st.progress(0)
                    status_text = st.empty()

                    for i, model_name in enumerate(selected_models):
                        status_text.text(f"–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")

                        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                        model = model_options[model_name]
                        model.fit(X_train, y_train)

                        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                        y_pred = model.predict(X_test)
                        y_pred_proba = model.predict_proba(X_test)[:, 1]

                        # –ú–µ—Ç—Ä–∏–∫–∏
                        accuracy = accuracy_score(y_test, y_pred)
                        conf_matrix = confusion_matrix(y_test, y_pred)
                        class_report = classification_report(y_test, y_pred)
                        roc_auc = roc_auc_score(y_test, y_pred_proba)

                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        results[model_name] = {
                            'model': model,
                            'accuracy': accuracy,
                            'confusion_matrix': conf_matrix,
                            'classification_report': class_report,
                            'roc_auc': roc_auc,
                            'y_pred_proba': y_pred_proba
                        }

                        progress_bar.progress((i + 1) / len(selected_models))

                    status_text.text("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")

                    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫
                    metrics_df = pd.DataFrame({
                        '–ú–æ–¥–µ–ª—å': list(results.keys()),
                        'Accuracy': [results[model]['accuracy'] for model in results.keys()],
                        'ROC-AUC': [results[model]['roc_auc'] for model in results.keys()]
                    }).round(4)

                    st.subheader("üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
                    st.dataframe(metrics_df.sort_values('ROC-AUC', ascending=False))

                    # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å
                    best_model_name = metrics_df.loc[metrics_df['ROC-AUC'].idxmax(), '–ú–æ–¥–µ–ª—å']
                    st.success(f"ü•á –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_name}")

                    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
                    for model_name, result in results.items():
                        with st.expander(f"üìà –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {model_name}"):

                            col1, col2 = st.columns(2)

                            with col1:
                                st.write(f"**Accuracy:** {result['accuracy']:.4f}")
                                st.write(f"**ROC-AUC:** {result['roc_auc']:.4f}")

                                # Confusion Matrix
                                st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:**")
                                fig, ax = plt.subplots(figsize=(6, 5))
                                sns.heatmap(result['confusion_matrix'], annot=True, fmt='d', 
                                          cmap='Blues', ax=ax)
                                ax.set_title(f'Confusion Matrix - {model_name}')
                                ax.set_xlabel('Predicted')
                                ax.set_ylabel('Actual')
                                st.pyplot(fig)

                            with col2:
                                st.write("**Classification Report:**")
                                st.text(result['classification_report'])

                    # ROC-–∫—Ä–∏–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
                    st.subheader("üìä ROC-–∫—Ä–∏–≤—ã–µ")
                    fig, ax = plt.subplots(figsize=(10, 8))

                    for model_name, result in results.items():
                        fpr, tpr, _ = roc_curve(y_test, result['y_pred_proba'])
                        ax.plot(fpr, tpr, label=f"{model_name} (AUC = {result['roc_auc']:.3f})")

                    ax.plot([0, 1], [0, 1], linestyle='--', color='gray', label='Random Guess')
                    ax.set_xlabel('False Positive Rate')
                    ax.set_ylabel('True Positive Rate')
                    ax.set_title('ROC-–∫—Ä–∏–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π')
                    ax.legend()
                    ax.grid(True)
                    st.pyplot(fig)

                    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    st.header("üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

                    st.write("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")

                    with st.form("prediction_form"):
                        col1, col2 = st.columns(2)

                        with col1:
                            if 'Type' in X.columns:
                                type_input = st.selectbox("Type (L=0, M=1, H=2)", [0, 1, 2])
                            air_temp = st.number_input("Air temperature [K]", value=300.0, min_value=250.0, max_value=350.0)
                            process_temp = st.number_input("Process temperature [K]", value=310.0, min_value=250.0, max_value=350.0)

                        with col2:
                            rotational_speed = st.number_input("Rotational speed [rpm]", value=1500, min_value=1000, max_value=3000)
                            torque = st.number_input("Torque [Nm]", value=40.0, min_value=0.0, max_value=100.0)
                            tool_wear = st.number_input("Tool wear [min]", value=100, min_value=0, max_value=300)

                        submit_button = st.form_submit_button("üéØ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

                        if submit_button and results:
                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            input_data = {}
                            for col in X.columns:
                                if 'Type' in col:
                                    input_data[col] = type_input
                                elif 'Air' in col or 'temperature' in col.lower():
                                    input_data[col] = air_temp
                                elif 'Process' in col or 'temperature' in col.lower():
                                    input_data[col] = process_temp
                                elif 'speed' in col.lower() or 'rpm' in col.lower():
                                    input_data[col] = rotational_speed
                                elif 'Torque' in col or 'torque' in col.lower():
                                    input_data[col] = torque
                                elif 'wear' in col.lower() or 'Tool' in col:
                                    input_data[col] = tool_wear

                            input_df = pd.DataFrame([input_data])
                            input_scaled = scaler.transform(input_df)

                            st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

                            for model_name, result in results.items():
                                model = result['model']
                                prediction = model.predict(input_scaled)[0]
                                prediction_proba = model.predict_proba(input_scaled)[0]

                                with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {model_name}"):
                                    if prediction == 1:
                                        st.error(f"‚ö†Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: –û–¢–ö–ê–ó –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø")
                                    else:
                                        st.success(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: –û–ë–û–†–£–î–û–í–ê–ù–ò–ï –í –ù–û–†–ú–ï")

                                    st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–∫–∞–∑–∞: {prediction_proba[1]:.3f}")
                                    st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {prediction_proba[0]:.3f}")

                else:
                    st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")

        else:
            st.error("‚ùå –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'Target' –∏–ª–∏ 'Machine failure' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    analysis_and_model_page()
